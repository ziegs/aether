DELIMITER \\
DROP PROCEDURE IF EXISTS dijkstraStops \\
CREATE PROCEDURE dijkstraStops(fromAirportID VARCHAR(255), toAirportID VARCHAR(255))
BEGIN
  DECLARE vFromID, vToID, vID, vCost, vPathID INT;
  DECLARE vFromCity, vToCity VARCHAR(255);
  -- null out path info in the Airports table
  UPDATE Airports SET PathID = NULL, Cost = NULL, Calculated = 0;
  -- find IDs referenced by input params
  SET vFromID = (SELECT ID FROM Airports WHERE ID = fromAirportID);
  IF vFromID IS NULL THEN
    SELECT CONCAT('From node name ', fromAirportID, ' not found.'); 
  ELSE
    BEGIN
      -- start at src node
      SET vID = vFromID;
      SET vToID = (SELECT ID FROM Airports WHERE ID = toAirportID);
      IF vToID IS NULL THEN
        SELECT CONCAT('From node name ', toAirportID, ' not found.');
      ELSE
        BEGIN
          -- calculate path costs till all are finished
          UPDATE Airports SET Cost = 0 WHERE ID = vFromID;
          WHILE vID IS NOT NULL DO
            BEGIN
              UPDATE
                Airports src JOIN Routes paths ON paths.sourceID = src.ID
                  JOIN Airports dest ON dest.ID = paths.destID
              SET dest.Cost = CASE
                                WHEN dest.Cost IS NULL THEN src.Cost + paths.Stops + 1
                                WHEN src.Cost + paths.Stops + 1 < dest.Cost THEN src.Cost + paths.Stops + 1
                                ELSE dest.Cost
                              END,
                  dest.PathID = Paths.PathID
              WHERE 
                src.ID = vID
                AND (dest.Cost IS NULL OR src.Cost + paths.Stops + 1 < dest.Cost)
                AND dest.Calculated = 0;
       
              UPDATE Airports SET Calculated = 1 WHERE ID = vID;

              SET vID = ( SELECT ID FROM Airports
                              WHERE Calculated = 0 AND Cost IS NOT NULL
                              ORDER BY Cost LIMIT 1
                        );
            END;
          END WHILE;
        END;
      END IF;
    END;
  END IF;
  IF EXISTS(SELECT 1 FROM Airports WHERE ID = vToID AND Cost IS NULL) THEN
    -- problem,  cannot proceed
    SELECT CONCAT('Node ', vID, ' missed.');
  ELSE
    BEGIN
      -- write itinerary to map table
      DROP TEMPORARY TABLE IF EXISTS Map;
      CREATE TEMPORARY TABLE Map (
        RowID INT PRIMARY KEY AUTO_INCREMENT,
        FromCityID INT,
        ToCityID INT,
        Stops INT
      );
      WHILE vFromID <> vToID DO
        BEGIN		
          SELECT 
            src.ID, dest.ID, dest.Cost, dest.PathID
            INTO vFromCity, vToCity, vCost, vPathID
          FROM 
            Airports dest JOIN Routes paths ON Paths.PathID = dest.PathID
              JOIN Airports src ON src.ID = paths.sourceID
          WHERE dest.ID = vToID;
          
          INSERT INTO Map(FromCityID, ToCityID, Stops) VALUES(vFromCity, vToCity, vCost);
          
          SET vToID = (SELECT SourceID FROM Routes WHERE PathID = vPathID);
        END;
      END WHILE;
      SELECT FromCityID, ToCityID, Stops FROM Map ORDER BY RowID DESC;
      DROP TEMPORARY TABLE Map;
    END;
  END IF;
END \\

DELIMITER \\
DROP PROCEDURE IF EXISTS dijkstraPrice \\
CREATE PROCEDURE dijkstraPrice(fromAirportID VARCHAR(255), toAirportID VARCHAR(255))
BEGIN
  DECLARE vFromID, vToID, vID, vCost, vPathID INT;
  DECLARE vFromCity, vToCity VARCHAR(255);
  -- null out path info in the Airports table
  UPDATE Airports SET PathID = NULL, Cost = NULL, Calculated = 0;
  -- find IDs referenced by input params
  SET vFromID = (SELECT ID FROM Airports WHERE ID = fromAirportID);
  IF vFromID IS NULL THEN
    SELECT CONCAT('From node name ', fromAirportID, ' not found.'); 
  ELSE
    BEGIN
      -- start at src node
      SET vID = vFromID;
      SET vToID = (SELECT ID FROM Airports WHERE ID = toAirportID);
      IF vToID IS NULL THEN
        SELECT CONCAT('From node name ', toAirportID, ' not found.');
      ELSE
        BEGIN
          -- calculate path costs till all are finished
          UPDATE Airports SET Cost = 0 WHERE ID = vFromID;
          WHILE vID IS NOT NULL DO
            BEGIN
              UPDATE
                Airports src JOIN Routes paths ON paths.sourceID = src.ID
                  JOIN Airports dest ON dest.ID = paths.destID
              SET dest.Cost = CASE
                                WHEN dest.Cost IS NULL THEN src.Cost + paths.TicketPrice
                                WHEN src.Cost + paths.TicketPrice < dest.Cost THEN src.Cost + paths.TicketPrice                                ELSE dest.Cost
                              END,
                  dest.PathID = Paths.PathID
              WHERE 
                src.ID = vID
                AND (dest.Cost IS NULL OR src.Cost + paths.TicketPrice < dest.Cost)
                AND dest.Calculated = 0;
       
              UPDATE Airports SET Calculated = 1 WHERE ID = vID;

              SET vID = ( SELECT ID FROM Airports
                              WHERE Calculated = 0 AND Cost IS NOT NULL
                              ORDER BY Cost LIMIT 1
                        );
            END;
          END WHILE;
        END;
      END IF;
    END;
  END IF;
  IF EXISTS(SELECT 1 FROM Airports WHERE ID = vToID AND Cost IS NULL) THEN
    -- problem,  cannot proceed
    SELECT CONCAT('Node ', vID, ' missed.');
  ELSE
    BEGIN
       -- write itinerary to map table
      DROP TEMPORARY TABLE IF EXISTS Map;
      CREATE TEMPORARY TABLE Map (
        RowID INT PRIMARY KEY AUTO_INCREMENT,
        FromCityID INT,
        ToCityID INT,
        Price INT
      );
      WHILE vFromID <> vToID DO
        BEGIN		
          SELECT 
            src.ID, dest.ID, dest.Cost, dest.PathID
            INTO vFromCity, vToCity, vCost, vPathID
          FROM 
            Airports dest JOIN Routes paths ON Paths.PathID = dest.PathID
              JOIN Airports src ON src.ID = paths.sourceID
          WHERE dest.ID = vToID;
          
          INSERT INTO Map(FromCityID, ToCityID, Price) VALUES(vFromCity, vToCity, vCost);
          
          SET vToID = (SELECT SourceID FROM Routes WHERE PathID = vPathID);
        END;
      END WHILE;
      SELECT FromCityID, ToCityID, Price FROM Map ORDER BY RowID DESC;
      DROP TEMPORARY TABLE Map;
    END;
  END IF;
END \\