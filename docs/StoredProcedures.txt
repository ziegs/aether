DELIMITER \\

DROP PROCEDURE IF EXISTS AllAirports\\
CREATE PROCEDURE AllAirports()
BEGIN
	SELECT * FROM Airports;
END\\

DROP PROCEDURE IF EXISTS AllAirlines\\
CREATE PROCEDURE AllAirlines()
BEGIN
	SELECT * FROM Airlines;
END\\

DROP PROCEDURE IF EXISTS AllRoutes\\
CREATE PROCEDURE AllRoutes()
BEGIN
	SELECT * FROM Routes;
END\\

DROP PROCEDURE IF EXISTS AirportsAirlineServices\\
CREATE PROCEDURE AirportsAirlineServices(IN Airline INT)
BEGIN
	SELECT A.* FROM ((SELECT DestID AS City FROM Airlines INNER JOIN Routes ON Airlines.ID = Routes.AirlineID WHERE Airlines.ID = Airline) UNION DISTINCT (SELECT SourceID AS CIty FROM Airlines INNER JOIN Routes ON Airlines.ID = Routes.AirlineID WHERE Airlines.ID = Airline)) AS Services INNER JOIN Airports A ON Services.City = A.ID;
END \\

DROP PROCEDURE IF EXISTS RoutesAirlineServices\\
CREATE PROCEDURE RoutesAirlineServices(IN Airline INT)
BEGIN
	SELECT * FROM Routes WHERE AirlineID = Airline;
END \\

DROP PROCEDURE IF EXISTS AirlinesLeavingAirport\\
CREATE PROCEDURE AirlinesLeavingAirport(IN Airport INT)
BEGIN
	SELECT * FROM Routes R INNER JOIN Airlines A ON R.AirlineID = A.ID WHERE R.SourceID = Airport;
END \\

DROP PROCEDURE IF EXISTS AirlinesEnteringAirport\\
CREATE PROCEDURE AirlinesEnteringAirport(IN Airport INT)
BEGIN
	SELECT * FROM Routes R INNER JOIN Airlines A ON R.AirlineID = A.ID WHERE R.DestID = Airport;
END \\

DROP PROCEDURE IF EXISTS DestinationsFromAirport\\
CREATE PROCEDURE DestinationsFromAirport(IN Airport INT)
BEGIN
	SELECT * FROM Routes R INNER JOIN Airports A ON R.DestID = A.ID WHERE R.SourceID = Airport;
END\\

DROP FUNCTION IF EXISTS AirportDistance\\
CREATE FUNCTION AirportDistance(airport1 INT, airport2 INT) RETURNS FLOAT DETERMINISTIC
BEGIN
	DECLARE Lat1, Lat2, Long1, Long2 FLOAT;
	DECLARE cur CURSOR FOR SELECT Latitude, Longitude FROM Airports A1 WHERE A1.ID = airport1;
	DECLARE cur2 CURSOR FOR SELECT Latitude, Longitude FROM Airports A2 WHERE A2.ID = airport2;
	OPEN cur;
	OPEN cur2;
	FETCH cur INTO Lat1, Long1;
	FETCH cur2 INTO Lat2, Long2;
	CLOSE cur;
	CLOSE cur2;
	RETURN ((ACOS(SIN(Lat1 * PI() / 180) * SIN(Lat2 * PI() / 180) + COS(Lat1 * PI() / 180) * COS(Lat2 * PI() / 180) * COS((Long1 - Long2) * PI() / 180)) * 180 / PI()) * 60 * 1.1515);
END\\

DROP FUNCTION IF EXISTS AirportTimeDifference\\
CREATE FUNCTION AirportTimeDifference(Airport1 INT, Airport2 INT) RETURNS INT DETERMINISTIC
BEGIN
	RETURN (SELECT A1.Timezone - A2.Timezone FROM Airports A1, Airports A2 WHERE A1.ID = Airport1 AND A2.ID = Airport2);
END\\

DROP FUNCTION IF EXISTS TicketPrice\\
CREATE FUNCTION TicketPrice(dist FLOAT, Stops INT, startRunways INT, endRunways INT) RETURNS FLOAT DETERMINISTIC
BEGIN	RETURN ((dist*4.5/5.0) / LOG((stops+2)*100)) + 100 - 40*(stops) - endRunways*8 - startRunways*5;
END\\

DROP PROCEDURE IF EXISTS PopulateTicketPrices\\
CREATE PROCEDURE PopulateTicketPrices()
BEGIN
	DECLARE done INT DEFAULT 0;
	DECLARE dist FLOAT;
	DECLARE SourceID, DestID, Stops, sRunways, eRunways INT;
	DECLARE cur CURSOR FOR SELECT A1.ID, A2.ID, R.Stops, A1.numRunways, A2.numRunways FROM Routes R INNER JOIN Airports A1 ON R.SourceID = A1.ID INNER JOIN Airports A2 ON R.DestID = A2.ID WHERE R.SourceID IS NOT NULL AND R.DestID IS NOT NULL;
	OPEN cur;
	REPEAT
		FETCH cur INTO SourceID, DestID, Stops, sRunways, eRunways;
		IF NOT done THEN
			SET @dist = AirportDistance(SourceID, DestID);
			SET @s = CONCAT("UPDATE Routes SET TicketPrice = '", TicketPrice(dist, Stops, sRunways, eRunways), "' WHERE SourceID = '", SourceID, "' AND DestID = '", DestID, "' AND Stops = '", Stops, "';");
			PREPARE stmt FROM @s;
			EXECUTE stmt;
		END IF;
	UNTIL done END REPEAT;
	CLOSE cur;
END\\

DROP PROCEDURE IF EXISTS CostBetweenAirports\\
CREATE PROCEDURE CostBetweenAirports(IN Airport1 INT, IN Airport2 INT)
BEGIN
	SELECT TicketPrice FROM Routes WHERE SourceID = Airport1 AND DestID = Airport2;
END\\

DROP PROCEDURE IF EXISTS AirportAtMaxElevation\\
CREATE PROCEDURE AirportAtMaxElevation()
BEGIN
	SELECT * FROM Airports A WHERE A.Altitude >= ALL(SELECT Altitude FROM Airports);
END \\

DROP PROCEDURE IF EXISTS AirportAtMinElevation\\
CREATE PROCEDURE AirportAtMinElevation()
BEGIN
	SELECT * FROM Airports A WHERE A.Altitude <= ALL(SELECT Altitude FROM Airports);
END \\

DROP PROCEDURE IF EXISTS PopulateInternational\\
CREATE PROCEDURE PopulateInternational()
BEGIN
	UPDATE Routes R INNER JOIN Airports A1 ON SourceID = A1.ID INNER JOIN Airports A2 ON DestID = A2.ID SET International = 'Y' WHERE A1.Country != A2.Country;
	UPDATE Routes R INNER JOIN Airports A1 ON SourceID = A1.ID INNER JOIN Airports A2 ON DestID = A2.ID SET International = 'N' WHERE A1.Country = A2.Country;
END\\